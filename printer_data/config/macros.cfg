#############################
## Bed mesh without Heater ##
#############################
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set TARGET_TEMP = printer.heater_bed.target %}
    M140 S0
    _BED_MESH_CALIBRATE {rawparams}
    M140 S{TARGET_TEMP}
    
###############################
## Start Print and End Print ##
###############################
# Replace the slicer's custom start and end g-code scripts with
# START_PRINT BED_TEMP=[bed_temperature_initial_layer] 
# EXTRUDER_TEMP=[nozzle_temperature_initial_layer]
# SET_PRINT_STATS_INFO TOTAL_LAYER=[total_layer_count]
[gcode_macro START_PRINT]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("45")|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    M104 S{target_extruder}
    M190 S{target_bed}

    STATUS_HOMING                        # Set LEDs to homing-mode
    M117 Homing
    G28                                  # Full home (XYZ)
    G90                                  # Absolute position

    SET_DISPLAY_TEXT MSG="Leveling"      # Display info on display
    STATUS_LEVELING                      # Set LEDs to leveling-mode
    Z_TILT_ADJUST                        # Level the printer via Z_TILT_ADJUST
    G28 Z                                # Home Z again after Z_TILT_ADJUST
    
    BED_MESH_CLEAR                       # Clear old saved bed mesh (if any)
    STATUS_MESHING
    M117 Meshing
    BED_MESH_CALIBRATE ADAPTIVE=1
    
    G0 X-5 Y-5
    M117 Heating
    STATUS_HEATING
    M190 S{target_bed}
    M109 S{target_extruder}

    KOMB                                 # Nozzle Brush

    STATUS_BUSY
    M117 Purging
    LINE_PURGE
    M117 Printing
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Printing"
    STATUS_PRINTING


[gcode_macro END_PRINT]
gcode:
    M117 Complete
    MR_NOTIFY TITLE="$printer_name" MESSAGE="$file Complete"
    STATUS_READY
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    G91
    G1 E-1
    PRESENT_BED
    BED_MESH_CLEAR
    SET_DISPLAY_TEXT MSG="Complete"
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=60

###############################
## Speed and Vibration Tests ##
###############################
[gcode_macro Y_VIBRATION_TEST]
description: Moves Y back and forth to find vibrations

gcode:
    {% set Y_START = params.Y_START|default(10)|int %}
    {% set Y_END = params.Y_END|default(230)|int %}
    {% set TIMES = params.TIMES|default(10)|int %}
    {% set SPEED = params.SPEED|default(9900)|int %}

    M400  # Wait for all previous moves to complete
    G90   # Set to relative positioning

    {% for i in range(TIMES) %}
        G1 Y{Y_START} F{SPEED}
        G1 Y{Y_END} F{SPEED}
    {% endfor %}

    # G90  # Return to absolute positioning
    M400  # Wait for all moves to complete


[gcode_macro X_VIBRATION_TEST]
description: Moves X back and forth to find vibrations

gcode:
    {% set X_START = params.X_START|default(10)|int %}
    {% set X_END = params.X_END|default(200)|int %}
    {% set TIMES = params.TIMES|default(10)|int %}
    {% set SPEED = params.SPEED|default(9000)|int %}

    M400  # Wait for all previous moves to complete
    G90   # Set to relative positioning

    {% for i in range(TIMES) %}
        G1 X{X_START} F{SPEED}
        G1 X{X_END} F{SPEED}
    {% endfor %}

    # G90  # Return to absolute positioning
    M400  # Wait for all moves to complete

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x %}
        {% if x_min < 0 %}
            {% set x_min = 0 %}
        {% endif %}
    
        {% set y_min = printer.toolhead.axis_minimum.y %}
        {% if y_min < 0 %}
            {% set y_min = 0 %}
        {% endif %}
    
        {% set x_min = x_min + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = y_min + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    


##########
## HOME ##
##########
[gcode_macro HOME]
description: Home all axis
gcode:
  G28

#################
## Present Bed ##
#################
[gcode_macro PRESENT_BED]
gcode:
  G91
  G1 Z5 F3000
  G90
  G1 X50 Y150 F3000
  

#####################
## Filament Change ##
#####################
# M600: Filament Change. This macro will pause the printer, move the ##
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.
[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-60 F1000
    M300 S500 P200
    M300 S500 P200
    RESTORE_GCODE_STATE NAME=M600_state
    STATUS_COMPLETE


###############
## Heat soak ##
###############
[gcode_macro PREHEAT_BED]
gcode:
    M190 S95
    M106 S128
    M190 S100
    M106 S255

[gcode_macro HEATSOAK_CHAMBER]
description: Heatsoak chamber to a specific temperature with a timeout
gcode:
    {% set chamber_sensor_enabled = printer["gcode_macro _HEAT_SOAK_VARIABLES"].chamber_temperature_sensor_enabled %}

    {% if chamber_sensor_enabled %}
        {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
        {% set MAXTIME = params.MAXTIME|default(printer["gcode_macro _HEAT_SOAK_VARIABLES"].print_default_chamber_max_heating_time)|int %}

        {% set verbose = printer["gcode_macro _HEAT_SOAK_VARIABLES"].verbose %}

        {% for _ in range(1, MAXTIME) %}
            _WAIT_CHAMBER_TEMP TEMP={SETPOINT_TEMP}
        {% endfor %}
        {% if verbose %}
            RESPOND MSG="Chamber temperature OK !"
        {% endif %}
        MR_NOTIFY TITLE="$printer_name" MESSAGE="Chamber heatsoak complete"
    {% endif %}


[gcode_macro _WAIT_CHAMBER_TEMP]
# This macro is needed to allow klipper populate a new value in the printer[...].temperature variable
# as each variables are populated only once at the beginning of every macro call
gcode:
    {% set chamber_sensor_enabled = printer["gcode_macro _HEAT_SOAK_VARIABLES"].chamber_temperature_sensor_enabled %}

    {% if chamber_sensor_enabled %}
        {% set chamber_sensor_name = printer["gcode_macro _HEAT_SOAK_VARIABLES"].chamber_temperature_sensor_name %}
        {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
        {% set CURRENT_TEMP = printer["temperature_sensor " ~ chamber_sensor_name].temperature|float %}

        {% if CURRENT_TEMP <= SETPOINT_TEMP %}
            RESPOND MSG="Heating up the chamber : {CURRENT_TEMP}/{SETPOINT_TEMP}"
            G4 P{60000 * 1} # wait a minute and check again if called in a loop
        {% endif %}
    {% endif %}


[gcode_macro HEATSOAK_BED]
description: Heatsoak bed at specified temperature and wait for a specific amount of time
gcode:
    SET_DISPLAY_TEXT
    {% set SETPOINT_TEMP = params.TEMP|default(100)|int %}
    {% set TIME = params.SOAKTIME|default(30)|int %}

    {% set verbose = printer["gcode_macro _HEAT_SOAK_VARIABLES"].verbose %}

    {% if verbose %}
        RESPOND MSG="Heating up bed..."
        SET_DISPLAY_TEXT MSG="Heating up bed..."
    {% endif %}

    STATUS_HEATING
    M190 S{SETPOINT_TEMP}

    {% if TIME > 0 %}
        {% for i in range(0, TIME) %}
            RESPOND MSG="Heatsoaking bed, {TIME-i}min left..."
            SET_DISPLAY_TEXT MSG="{TIME-i}min left"
            G4 P{60000 * 1}
        {% endfor %}
    {% else %}
        RESPOND MSG="No heatsoak needed"
        SET_DISPLAY_TEXT MSG="No heatsoak needed"
    {% endif %}
    
    {% if verbose %}
        RESPOND MSG="Bed temperature OK"
        SET_DISPLAY_TEXT MSG="Bed temperature OK"
    {% endif %}
    SET_DISPLAY_TEXT MSG="Printer is ready"
    MR_NOTIFY TITLE="$printer_name" MESSAGE="Bed heatsoak complete"


[gcode_macro _HEAT_SOAK_VARIABLES]
# Enable verbose output to let the macro have a chat
variable_verbose:             True    # Enable verbose output
variable_print_default_chamber_temp: 45
variable_print_default_chamber_max_heating_time: 30
variable_print_default_soak: 30
variable_chamber_temperature_sensor_enabled: True
variable_chamber_temperature_sensor_name: "chamber"
gcode:

###############################
## Mobileraker Notifications ##
###############################
[gcode_macro MR_NOTIFY]
description: Allows you to send a custom notification via Mobileraker without using the M117 command
gcode:
    {% set msg = "MR_NOTIFY:" ~ (params.TITLE ~ "|" if 'TITLE' in params|upper else "") ~ params.MESSAGE %}

    {% if 'MESSAGE' in params|upper %}
        { action_respond_info(msg) }
    {% else %}
        { action_raise_error('Must provide MESSAGE parameter') }
    {% endif %}
    

###################
## Clear Display ##
###################
[delayed_gcode clear_display]
gcode:
  M117

######################
## Client Variables ##
######################
## Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 215.0 ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 10.0  ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 45.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 50.0  ; z move speed in mm/s
variable_speed_move       : 300.0 ; move speed in mm/s
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : True  ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "KOMB"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "M117 Cancelled"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode: